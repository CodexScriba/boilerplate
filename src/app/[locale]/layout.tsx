import type { Metadata } from "next";
import { Poppins } from "next/font/google";
import "../globals.css";
import { PostHogProvider } from "../providers";
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';

// Import Poppins with all available weights for easy use
// This loads all weight variants from thin (100) to black (900)
// for maximum flexibility in your design system
const poppins = Poppins({
  // Include all weight variants from thin (100) to black (900)
  weight: ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
  // Define as a CSS variable for easy access throughout the application
  variable: '--font-poppins',
  // Include Latin character subset
  subsets: ['latin'],
  // Optional: You can also include font display strategy
  display: 'swap',
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// TODO: Add dynamic metadata based on locale

export default async function RootLayout({
  children,
  params
}: Readonly<{
  children: React.ReactNode;
  params: { locale: string };
}>) {
  // Ensure that the incoming locale is valid
  const { locale } = params;
  if (!routing.locales.includes(locale as any)) {
    notFound();
  }

  // Providing all messages to the client side
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body
        className={`${poppins.variable} font-poppins antialiased`}
      >
        <NextIntlClientProvider messages={messages} locale={locale}>
          <PostHogProvider>
            {children}
          </PostHogProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

// TODO: Create a typography utility class or component that leverages the different Poppins weights
