import type { Metadata } from "next";
import { Poppins } from "next/font/google";
import "../globals.css";
import '../styles/navbar.css';
import { PostHogProvider } from "../providers";
import { NextIntlClientProvider } from 'next-intl';
import { getMessages, unstable_setRequestLocale } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '../../i18n/routing';
import Navbar from "../components/Navbar/Navbar";
import { ThemeProvider } from "../../components/theme/ThemeProvider";
import classNames from 'classnames';

/**
 * Poppins font configuration
 * 
 * Loading all weight variants (100-900) for comprehensive typography options
 * Using CSS variable --font-poppins for easy access throughout the application
 */
const fontPoppins = Poppins({
  subsets: ['latin'],
  weight: ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
  variable: '--font-poppins',
  display: 'swap',
});

// Generate static params for all supported locales
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

// TODO: Add dynamic metadata based on locale
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

type Props = {
  children: React.ReactNode;
  params: Promise<{locale: 'en' | 'es'}>;
};

export default async function RootLayout({children, params}: Props) {
  // Extract locale from params (which is a Promise in App Router)
  const {locale} = await params;
  
  // Validate that the incoming locale is supported
  if (!routing.locales.includes(locale as 'en' | 'es')) {
    notFound();
  }

  // Enable static rendering
  unstable_setRequestLocale(locale);

  // Get messages for the current locale
  const messages = await getMessages();

  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={classNames(
          'min-h-screen bg-background font-sans antialiased theme-transition',
          fontPoppins.variable
        )}
      >
        <NextIntlClientProvider locale={locale} messages={messages}>
          <ThemeProvider defaultTheme="system" storageKey="theme">
            <PostHogProvider>
              {/* Added Navbar component to the layout */}
              <Navbar />
              <main>
                {children}
              </main>
            </PostHogProvider>
          </ThemeProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
